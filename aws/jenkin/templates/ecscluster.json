{
  "Description":
    "This template deploys an ECS cluster to the provided VPC and subnets  using an Auto Scaling Group\n",
  "Parameters": {
    "ProductName": {
      "Description":
        "The Product Name, that we tag with every resource , so that we can track resources for products",
      "Type": "String"
    },
    "EnvironmentName": {
      "Description":
        "An environment name that will be prefixed to resource names",
      "Type": "String"
    },
    "EcsInstanceName": {
      "Description": "Name to identify cluster's slave instances",
      "Type": "String",
      "Default": "EcsInstance"
    },
    "InstanceType": {
      "Description":
        "Which instance type should we use to build the ECS cluster?",
      "Type": "String",
      "Default": "t2.micro"
    },
    "MaxClusterSize": {
      "Description": "How many ECS hosts do you want to initially deploy?",
      "Type": "Number",
      "Default": 4
    },
    "MinClusterSize": {
      "Description": "How many ECS hosts do you want to initially deploy?",
      "Type": "Number",
      "Default": 1
    },
    "DesiredClusterSize": {
      "Description": "How many ECS hosts do you want to initially deploy?",
      "Type": "Number",
      "Default": 2
    },
    "VPC": {
      "Description": "Choose which VPC this ECS cluster should be deployed to",
      "Type": "AWS::EC2::VPC::Id"
    },
    "PrivateSubnets": {
      "Description":
        "Choose which private subnets this ECS cluster should be deployed to",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "SshSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup::Id",
      "Description": "The security group that grants access to EFS"
    },
    "EfsSecurityGroup": {
      "Description": "The security group that grants access to EFS",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "EcsHostSecurityGroup": {
      "Description":
        "Select the Security Group to use for the ECS cluster hosts",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "AddEfs": {
      "Type": "String",
      "Description":
        "Optional , When set to true, creates EFS volume and attach to cluster instances",
      "Default": false
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description":
        "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances",
      "Default": "mykey"
    },
    "FileSystem": {
      "Description": "This is a Simple Description of Efs file System",
      "Type": "String"
    }
  },
  "Conditions": {
    "CreateClusterWithEfs": {
      "Fn::Equals": [
        "true",
        {
          "Ref": "AddEfs"
        }
      ]
    },
    "CreateClusterWithoutEfs": {
      "Fn::Equals": [
        "false",
        {
          "Ref": "AddEfs"
        }
      ]
    }
  },
  "Mappings": {
    "RegionAmazonECSOptimizedAMIMapping": {
      "us-east-2": {
        "AMI": "ami-bb8eaede"
      },
      "us-east-1": {
        "AMI": "ami-d61027ad"
      },
      "us-west-2": {
        "AMI": "ami-c6f81abe"
      },
      "us-west-1": {
        "AMI": "ami-514e6431"
      },
      "eu-west-2": {
        "AMI": "ami-0a85946e"
      },
      "eu-west-1": {
        "AMI": "ami-bd7e8dc4"
      },
      "eu-central-1": {
        "AMI": "ami-f15ff69e"
      },
      "ap-northeast-1": {
        "AMI": "ami-ab5ea9cd"
      },
      "ap-southeast-2": {
        "AMI": "ami-c3233ba0"
      },
      "ap-southeast-1": {
        "AMI": "ami-ae0b91cd"
      },
      "ca-central-1": {
        "AMI": "ami-32bb0556"
      }
    }
  },
  "Conditions": {
    "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyName"}]}]}
  },
  "Resources": {
    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },
    "CloudInitLogStream": {
      "Type": "AWS::Logs::LogStream",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudFormationLogs"
        },
        "LogStreamName": "cloud-init.log"
      }
    },
    "CloudInitOutputLogStream": {
      "Type": "AWS::Logs::LogStream",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudFormationLogs"
        },
        "LogStreamName": "cloud-init-output.log"
      }
    },
    "CfnInitLogStream": {
      "Type": "AWS::Logs::LogStream",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudFormationLogs"
        },
        "LogStreamName": "cfn-init.log"
      }
    },
    "CfnHupLogStream": {
      "Type": "AWS::Logs::LogStream",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudFormationLogs"
        },
        "LogStreamName": "cfn-hup.log"
      }
    },
    "CfnWireLogStream": {
      "Type": "AWS::Logs::LogStream",
      "Properties": {
        "LogGroupName": {
          "Ref": "CloudFormationLogs"
        },
        "LogStreamName": "cfn-wire.log"
      }
    },
    "TemplateValidationAndAliasListing": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["cloudformation:ValidateTemplate"],
              "Resource": ["*"]
            },
            {
              "Effect": "Allow",
              "Action": ["iam:ListAccountAliases"],
              "Resource": ["*"]
            }
          ]
        }
      }
    },
    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess",
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
          "arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
          {
            "Ref": "TemplateValidationAndAliasListing"
          }
        ],
        "Policies": [
          {
            "PolicyName": "metricaccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData",
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:ListMetrics",
                    "ec2:DescribeTags",
                    "autoscaling:DescribeAutoScalingInstances",
                    "ec2:TerminateInstances",
                    "s3:CreateBucket",
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:PutBucketPolicy",
                    "s3:DeleteBucketPolicy"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "assumeroleaccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["sts:AssumeRole"],
                  "Resource": ["*"]
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "Metadata": {}
    },
    "EC2Role":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "ecs:*",
                    "elasticloadbalancing:Describe*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "JenkinsECSInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EC2Role"
          }
        ]
      }
    },
    "JenkinsCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "jenkins-cluster"
      }
    },
    "JenkinsMasterTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "jenkins-master",
        "NetworkMode": "bridge",
        "ContainerDefinitions": [
          {
            "Name": "jenkins-master",
            "Image": {
              "Ref": "DockerImage"
            },
            "MountPoints": [
              {
                "SourceVolume": "data-volume",
                "ContainerPath": "/var/jenkins_home"
              },
              {
                "SourceVolume": "docker-handle",
                "ContainerPath": "/var/run/docker.sock"
              }
            ],
            "Essential": true,
            "Cpu": 1024,
            "MemoryReservation": 992,
            "PortMappings": [
              {
                "HostPort": 8080,
                "ContainerPort": 8080,
                "Protocol": "tcp"
              },
              {
                "HostPort": 50000,
                "ContainerPort": 50000,
                "Protocol": "tcp"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Host": {
              "SourcePath": "/data/"
            },
            "Name": "data-volume"
          },
          {
            "Host": {
              "SourcePath": "/var/run/docker.sock"
            },
            "Name": "docker-handle"
          }
        ]
      }
    },
    "JenkinsECSService": {
      "DependsOn": ["JenkinsELB"],
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": "jenkins-cluster",
        "DesiredCount": 1,
        "ServiceName": "jenkins-master",
        "TaskDefinition": {
          "Ref": "JenkinsMasterTaskDefinition"
        },
        "Role" : { "Ref" : "ECSServiceRole" },
        "LoadBalancers": [
          {
            "LoadBalancerName": "jenkins-elb",
            "ContainerPort": "8080",
            "ContainerName": "jenkins-master"
          }
        ]
      }
    },
    "JenkinsECSLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionAmazonECSOptimizedAMIMapping",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "IamInstanceProfile": {
          "Ref": "JenkinsECSInstanceProfile"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
        "SecurityGroups": [
          {
            "Ref": "JenkinsSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "VolumeSize": "24",
              "DeleteOnTermination": true
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "echo 'ECS_CLUSTER=jenkins-cluster' >> /etc/ecs/ecs.config\n",
                "#Mount EFS volume\n",
                "yum install -y nfs-utils\n",
                "EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`\n",
                "EC2_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "EFS_FILE_SYSTEM_ID=",
                {
                  "Ref": "JenkinsEFS"
                },
                "\n",
                "EFS_PATH=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com\n",
                "mkdir /data\n",
                "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EFS_PATH:/ /data\n",
                "#Give ownership to jenkins user\n",
                "chown 1000 /data\n"
              ]
            ]
          }
        }
      }
    },
    "JenkinsECSAutoScaling": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": ["MountTarget"],
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "JenkinsECSLaunchConfiguration"
        },
        "MinSize": "2",
        "MaxSize": "5",
        "DesiredCapacity": "2",
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": "400",
        "Tags": [
          {
            "Key": "Name",
            "Value": "jenkins-ecs-instance",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },

    "JenkinsClusterScaleUpPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "JenkinsECSAutoScaling" },
        "EstimatedInstanceWarmup" : 60,
        "MetricAggregationType" : "Average",
        "PolicyType" : "StepScaling",
        "StepAdjustments" : [ {
          "MetricIntervalLowerBound" : 0,
          "ScalingAdjustment" : 2
        }]
      }
    },

    "JenkinsClusterScaleUpAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU utilization peaked at 70% during the last minute",
        "AlarmName" : "JenkinsClusterScaleUpAlarm",
        "AlarmActions": [ { "Ref": "JenkinsClusterScaleUpPolicy" } ],
        "Dimensions" : [{
          "Name": "ClusterName",
          "Value": "jenkins-cluster"
        }],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Statistic" : "Maximum",
        "Threshold" : 70,
        "Period" : 60,
        "EvaluationPeriods": 1,
        "TreatMissingData" : "notBreaching"
      }
    },

    "JenkinsClusterScaleDownPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "PercentChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "JenkinsECSAutoScaling" },
        "Cooldown"             : "120",
        "ScalingAdjustment"    : "-50"
      }
    },
    "JenkinsClusterScaleDownAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU utilization is under 50% for the last 10 min (change 10 min to 45 min for prod use as you pay by the hour )",
        "AlarmName" : "JenkinsClusterScaleDownAlarm",
        "AlarmActions": [ { "Ref": "JenkinsClusterScaleDownPolicy" } ],
        "Dimensions" : [{
          "Name": "ClusterName",
          "Value": "jenkins-cluster"
        }],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "ComparisonOperator" : "LessThanThreshold",
        "Statistic" : "Maximum",
        "Threshold" : 50,
        "Period" : 600,
        "EvaluationPeriods": 1,
        "TreatMissingData" : "notBreaching"
      }
    }
  },
  "Outputs": {
    "Cluster": {
      "Description": "A reference to the ECS cluster",
      "Value": {
        "Ref": "ECSCluster"
      }
    }
  }
}
